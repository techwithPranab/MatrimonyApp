name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create .env.local file
      run: |
        echo "MONGODB_URI=mongodb://localhost:27017/matrimony-test" >> .env.local
        echo "NEXTAUTH_SECRET=test-secret-for-ci" >> .env.local
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local
        echo "UPLOADTHING_SECRET=test-secret" >> .env.local
        echo "UPLOADTHING_APP_ID=test-app-id" >> .env.local
        echo "PUSHER_APP_ID=test-pusher-id" >> .env.local
        echo "PUSHER_KEY=test-pusher-key" >> .env.local
        echo "PUSHER_SECRET=test-pusher-secret" >> .env.local
        echo "PUSHER_CLUSTER=us2" >> .env.local
        echo "STRIPE_SECRET_KEY=sk_test_dummy" >> .env.local
        echo "STRIPE_PUBLISHABLE_KEY=pk_test_dummy" >> .env.local
        echo "EMAIL_HOST=smtp.mailtrap.io" >> .env.local
        echo "EMAIL_PORT=587" >> .env.local
        echo "EMAIL_USER=test" >> .env.local
        echo "EMAIL_PASS=test" >> .env.local

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm test

    - name: Run build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files-${{ matrix.node-version }}
        path: .next/
        retention-days: 7

  e2e-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Create .env.local file
      run: |
        echo "MONGODB_URI=mongodb://localhost:27017/matrimony-e2e" >> .env.local
        echo "NEXTAUTH_SECRET=test-secret-for-e2e" >> .env.local
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local
        echo "UPLOADTHING_SECRET=test-secret" >> .env.local
        echo "UPLOADTHING_APP_ID=test-app-id" >> .env.local
        echo "PUSHER_APP_ID=test-pusher-id" >> .env.local
        echo "PUSHER_KEY=test-pusher-key" >> .env.local
        echo "PUSHER_SECRET=test-pusher-secret" >> .env.local
        echo "PUSHER_CLUSTER=us2" >> .env.local
        echo "STRIPE_SECRET_KEY=sk_test_dummy" >> .env.local
        echo "STRIPE_PUBLISHABLE_KEY=pk_test_dummy" >> .env.local

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: 6.0

    - name: Run Playwright tests
      run: npm run e2e

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate || true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, deploy to Vercel staging
        # npm i -g vercel
        # vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_SCOPE }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example, deploy to Vercel production
        # npm i -g vercel
        # vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_SCOPE }}

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "Deployment completed"
        # Add notification logic here (Slack, Discord, Email, etc.)
